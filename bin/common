#!/bin/bash

TEST_URLS='
    https://check.firewalla.com 204
    http://cp.cloudflare.com 204
    http://clients3.google.com/generate_204 204
    https://www.gstatic.com/generate_204 204
    http://detectportal.firefox.com/success.txt 200
'

init_network_config() {
  _rc=0
  redis-cli set "fireboot:status" "apply_network"
  echo "Awaiting FireRouter API available ..."
  sleep 3
  timeout=60
  api_ready=0
  while [[ timeout -gt 0 && api_ready -eq 0 ]]
  do
    HTTP_STATUS_CODE=`curl -m10 -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/phy_interfaces' -XGET`
    if [[ $HTTP_STATUS_CODE != 200 ]]; then
      sleep 2
    else
      api_ready=1
    fi
    ((timeout-=1))
  done

  if [[ $api_ready -eq 0 ]]; then
    _rc=1
  fi

  test $_rc -eq  0 || return $_rc
  echo "FireRouter API is available"

  # start fireapi so that app can talk to the box via HTTP
  if ! systemctl is-active fireapi &>/dev/null; then
    echo "Starting FireAPI ..."
    sudo cp /home/pi/firewalla/etc/fireapi.service /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl restart fireapi
  fi

  redis-cli set "fireboot:status" "apply_network"
  echo "Applying last successful network config ..."

  BEGIN=$(date +%s)
  if [[ ! -f /dev/shm/firerouter.prepared ]]; then
    echo "Preparing network environment ..."
    HTTP_STATUS_CODE=`curl -m30 -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/prepare_env' -XPOST -H 'Content-Type: application/json' -d {}`
    if [[ $HTTP_STATUS_CODE != "200" ]]; then
      echo "Failed to prepare environment"
      _rc=2
    else
      touch /dev/shm/firerouter.prepared
    fi
  fi

  test $_rc -eq  0 || return $_rc

  HTTP_STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/apply_current_config' -XPOST -H 'Content-Type: application/json' -d {}`
  if [[ $HTTP_STATUS_CODE == "000" ]]; then
    # maybe timeout, try again, firerouter guarantees sequential execution on applying network config, so no need to worry about race condition
    echo "Timeout apply current config, try again"
    HTTP_STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/apply_current_config' -XPOST -H 'Content-Type: application/json' -d {}`
  fi
  if [[ $HTTP_STATUS_CODE != "200" ]]; then
    echo "Failed to apply current config"
    _rc=2
  fi

  test $_rc -eq  0 || return $_rc

  END=$(date +%s)
  echo "Successfully apply last network config, took $(( $END - $BEGIN )) seconds to finish"

  wait_until_any_wan_carrier_connected
  test_network
}

test_curl_http_code() {
    url=$1
    test -n "$url" || return 1
    http_code_expect=${2:-200}
    echo "Testing URL($url) and expecting http code($http_code_expect) ..."
    http_code_actual=$(curl -sq -m30 -o /dev/null -w "%{http_code}" "$url")
    if [[ -n $http_code_actual && $http_code_actual -eq $http_code_expect ]]
    then
        echo OK
        return 0
    else
        if [[ $http_code_actual == "302" ]]; then
          redirect_url=$(curl -Lqs -w "%{url_effective}" -o /dev/null "$url")
        fi
        echo "fail($http_code_actual)"
        return 1
    fi
}

test_any_wan_carrier_connected() {
  count=$(curl -s -m10 localhost:8837/v1/config/wan/connectivity?live=true | jq '.wans | with_entries(select(.value.carrier == true)) | length')
  test $? -ne 0 && return 1
  test $count -gt 0 && return 0
  return 2
}

wait_until_any_wan_carrier_connected() {
  redis-cli set "fireboot:status" "wait_wan_carrier"
  echo "Checking if any wan carrier is connected"
  _cnt=0
  while ! test_any_wan_carrier_connected; do
    (( _cnt++ ))
    redis-cli set "fireboot:status:code" $_cnt &> /dev/null
    sleep 2

    if [[ $_cnt -gt 10 ]]; then
      redis-cli set "fireboot:status" "network_down" &> /dev/null
      redis-cli set "fireboot:network_down:code" $_cnt &> /dev/null
    fi
  done
  echo "Confirmed that wan carrier is connected"
}

test_network() {
  echo "Testing network connectivity ..."
  # if fireboot:status is network_down, this function will be invoked in an infinite loop in fireboot, do not override network_down in such case
  if [[ $(redis-cli get fireboot:status) != "network_down" ]]; then
    redis-cli set "fireboot:status" "test_network"
  fi

  retry=30;_rc=0
  while [[ $retry -gt 0 ]]; do
    redis-cli set "fireboot:status:code" $retry &> /dev/null
    sleep 3;
    (( retry-- ))

    # report down if already retried for 10 times
    if [[ $retry -eq 20 ]]; then
      led_report_network_down
    fi

    if ! nc -w 5 -z 1.1.1.1 443; then
        echo "Unable to reach 1.1.1.1, trying 8.8.8.8 ..."
        if ! nc -w 5 -z 8.8.8.8 53; then
          echo "Unable to reach 8.8.8.8"
          _rc=3
          continue
        fi
    fi

    if ! dig +short +timeout=5 github.com && ! dig +short +timeout=5 +tcp github.com; then
        echo "DNS is unavailable for dig github.com (both tcp & udp)"
        if ! host -W 5 firewalla.encipher.io; then
          echo "DNS is unavailable for host firewalla.encipher.io"
          _rc=4
          continue
        fi
    fi

    redirect_url=""
    while read testurl ; do
        test -n "$testurl" || continue # try another url if this test url is empty
        test_curl_http_code $testurl || { _rc=5; continue; } # mark as fail if test fails, and try another one
        _rc=0; break; # mark as success if any of url test succeeds
    done < <(echo "$TEST_URLS")
    if [[ -n $redirect_url ]]; then
      redis-cli set "fireboot:status:redirect_url" $redirect_url
    else
      redis-cli del "fireboot:status:redirect_url"
    fi
    test $_rc -eq 5 && continue # retry the whole test_network if the test url while-loop fails

    _rc=0
    break;
  done
  test $_rc -eq 0 || return $_rc
  led_report_network_up
  echo "Network connectivity test succeeded"
}

update_timezone() {
  FW_TIMEZONE=$(redis-cli hget sys:config timezone)
  FW_ACTUAL_TIMEZONE=$(cat /etc/timezone)
  if [[ "x$FW_TIMEZONE" != "x" && "x$FW_TIMEZONE" != "x$FW_ACTUAL_TIMEZONE" ]]; then
    sudo timedatectl set-timezone $FW_TIMEZONE
    sudo systemctl restart cron.service # this is to ensure cron jobs are set to the right timezone
    sudo systemctl restart rsyslog
  fi
}
