#!/bin/bash

sleep 3

redis-cli del "fireboot:status"
redis-cli del "fireboot:network_down:code"

: ${FIREROUTER_HOME:=/home/pi/firerouter}

source ${FIREROUTER_HOME}/bin/common
source ${FIREROUTER_HOME}/platform/platform.sh

NODE_MODULES_PATH=$(get_node_modules_dir)
if [[ -h ${FIREROUTER_HOME}/node_modules ]]; then
  rm ${FIREROUTER_HOME}/node_modules
  ln -s $NODE_MODULES_PATH ${FIREROUTER_HOME}/node_modules
fi

# step 1 - init network config
rc=0

if [[ $NETWORK_SETUP == "yes" ]]; then
  init_network_config; rc=$?
else
  test_network; rc=$?
fi

bootingComplete=$(redis-cli get bootingComplete)
while [[ ! $rc -eq 0 ]]; do
  redis-cli set "fireboot:status" "network_down"
  redis-cli set "fireboot:network_down:code" $rc
  if [[ $rc -eq 1 || $rc -eq 2 ]]; then
    # do not retry if there is error from network config apply
    exit $rc
  else
    if [[ $bootingComplete == "1" ]]; then
      # retry if error is from test_network
      test_network; rc=$?
    else
      # simply exit if this is initial setup
      exit $rc
    fi
  fi
done
redis-cli del "fireboot:network_down:code"

update_timezone

# step 2 - upgrade firerouter
redis-cli set "fireboot:status" "firerouter_check_upgrade"
echo "Upgrading FireRouter ..."
/home/pi/firerouter/scripts/firerouter_upgrade.sh


# step 3 - restart firerouter and init network config again
if [[ -f /dev/shm/firerouter.upgraded ]]; then

  if [[ $NETWORK_SETUP == "yes" ]]; then
    # need to redo prepare network if firerouter is upgraded or branch is changed
    rm -f /dev/shm/firerouter.prepared
    redis-cli set "fireboot:status" "firerouter_upgrade"
    echo "Restarting FireRouter ..."
    sudo systemctl restart firerouter

    init_network_config
  else
    test_network
  fi

  rm -f /dev/shm/firerouter.upgraded
  echo "Restarting FireReset ..."
  sudo systemctl restart firereset
fi

# step 4 - start fireupgrade
redis-cli set "fireboot:status" "fireupgrade"
echo "Starting Fireupgrade ..."
sudo systemctl start fireupgrade

# step 5 - start firewalla
redis-cli set "fireboot:status" "firewalla"
echo "Starting Firewalla ..."
touch /home/pi/.firewalla/managed_reboot
sudo systemctl start firewalla

redis-cli set "fireboot:status" "firewalla_service_done"

update_timezone

exit 0
