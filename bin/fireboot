#!/bin/bash

sleep 3

redis-cli del "fireboot:status"
redis-cli del "fireboot:network_down:code"

: ${FIREROUTER_HOME:=/home/pi/firerouter}

source ${FIREROUTER_HOME}/bin/common
source ${FIREROUTER_HOME}/platform/platform.sh

NODE_MODULES_PATH=$(get_node_modules_dir)
if [[ -h ${FIREROUTER_HOME}/node_modules ]]; then
  if [[ $(readlink ${FIREROUTER_HOME}/node_modules) != $NODE_MODULES_PATH ]]; then
    ln -sfT $NODE_MODULES_PATH ${FIREROUTER_HOME}/node_modules
  fi
fi

# step 1 - init network config
rc=0

if [[ $NETWORK_SETUP == "yes" ]]; then
  remap_eth_interfaces
  init_network_config; rc=$?
else
  wait_until_any_wan_carrier_connected
  test_network; rc=$?
fi

logger "Uptime after init_network_config: $(awk '{print $1}' /proc/uptime)"
record_eth_interfaces


bootingComplete=$(redis-cli get bootingComplete)
while [[ ! $rc -eq 0 ]]; do
  redis-cli set "fireboot:status" "network_down" &> /dev/null
  redis-cli set "fireboot:network_down:code" $rc &> /dev/null
  if [[ $rc -eq 1 || $rc -eq 2 ]]; then
    # do not retry if there is error from network config apply
    exit $rc
  else
    if [[ $bootingComplete == "1" ]]; then
      # retry if error is from test_network
      test_network; rc=$?
    else
      # simply exit if this is initial setup
      exit $rc
    fi
  fi
done
redis-cli del "fireboot:network_down:code"
logger "Uptime after test_network: $(awk '{print $1}' /proc/uptime)"

update_timezone

# step 2 - upgrade firerouter
redis-cli set "fireboot:status" "firerouter_check_upgrade"
echo "Upgrading FireRouter ..."
/home/pi/firerouter/scripts/firerouter_upgrade.sh


# step 3 - restart firerouter and init network config again
if [[ -f /dev/shm/firerouter.upgraded ]]; then

  if [[ $NETWORK_SETUP == "yes" ]]; then
    # need to redo prepare network if firerouter is upgraded or branch is changed
    rm -f /dev/shm/firerouter.prepared
    redis-cli set "fireboot:status" "firerouter_upgrade"
    echo "Restarting FireRouter ..."
    sudo systemctl restart firerouter

    init_network_config
  else
    test_network
  fi

  rm -f /dev/shm/firerouter.upgraded
  if systemctl is-active firereset &>/dev/null; then
    echo "Firereset is active, lazy-restarting FireReset with SIGINT..."
    sudo pkill -SIGINT firereset
  else
    echo "Starting firereset..."
    sudo systemctl start firereset
  fi
fi
logger "Uptime after firerouter_upgrade: $(awk '{print $1}' /proc/uptime)"

if [[ $NETWORK_SETUP == "yes" ]]; then
  service_updated="0"
  firereset_restart_needed="0"
  if ! diff -q /home/pi/firerouter/scripts/firereset.service /etc/systemd/system/firereset.service > /dev/null; then
    sudo cp /home/pi/firerouter/scripts/firereset.service /etc/systemd/system/.
    service_updated="1"
    firereset_restart_needed="1"
  fi
  if ! diff -q /home/pi/firerouter/scripts/firerouter.service /etc/systemd/system/firerouter.service > /dev/null; then
    sudo cp /home/pi/firerouter/scripts/firerouter.service /etc/systemd/system/.
    service_updated="1"
  fi
  if ! diff -q /home/pi/firerouter/scripts/fireboot.service /etc/systemd/system/fireboot.service > /dev/null; then
    sudo cp /home/pi/firerouter/scripts/fireboot.service /etc/systemd/system/.
    service_updated="1"
  fi
  if [[ $service_updated == "1" ]]; then
    sudo systemctl daemon-reload
  fi
  if [[ $firereset_restart_needed == "1" ]]; then
    if systemctl is-active firereset &>/dev/null; then
      echo "Firereset is active, lazy-restarting FireReset with SIGINT..."
      sudo pkill -SIGINT firereset
    fi
  fi
fi

# step 4 - start fireupgrade
redis-cli set "fireboot:status" "fireupgrade"
echo "Starting Fireupgrade ..."
sudo systemctl start fireupgrade

logger "Uptime after fireupgrade: $(awk '{print $1}' /proc/uptime)"

# step 5 - start firewalla
redis-cli set "fireboot:status" "firewalla"
echo "Starting Firewalla ..."
touch /home/pi/.firewalla/managed_reboot
sudo systemctl restart firewalla

redis-cli set "fireboot:status" "firewalla_service_done"
redis-cli HINCRBY "stats:systemd:restart" FireBoot 1
update_timezone

logger "Uptime after firewalla_service_done: $(awk '{print $1}' /proc/uptime)"

exit 0
