#!/bin/bash

execute_and_log() {
    if [ -z "$1" ]; then
        return 1
    fi
    command="$*"
    # echo "command: $command" >> /tmp/dhcpcd6.log
    eval "$command"
}

metric=${ifmetric:-'1024'}
mtu=${ifmtu:-'1500'}

if [ -z "$rt_tables" ]; then
    rt_tables="main"
fi

if [ -z "$default_rt_tables" ]; then
    default_rt_tables="main"
fi

ip_changed=""

case $reason in

  ROUTERADVERT)
    # If the IPv6 address of the upstream router changes, 
    # we may recieve sevaral groups of nd_* variables, take the last complete ND option set.
    nd_id=10
    nd_from=""
    while [ $nd_id -gt 0 ]; do
      nd_name="nd${nd_id}_from"
      eval "nd_from_val=\$$nd_name"
      nd_mtu="nd${nd_id}_mtu"
      eval "nd_mtu_val=\$$nd_mtu"
      nd_rdnss1_servers="nd${nd_id}_rdnss1_servers"
      eval "nd_rdnss1_servers_val=\$$nd_rdnss1_servers"
      nd_addr1="nd${nd_id}_addr1"
      eval "nd_addr1_val=\$$nd_addr1"

      if [ -n "$nd_from_val" ] && { [ -n "$nd_mtu_val" ] || [ -n "$nd_rdnss1_servers_val" ] || [ -n "$nd_addr1_val" ]; }; then
        nd_from=${nd_from_val}
        break
      else
        nd_id=$((nd_id - 1));
        continue
      fi
    done

    if [ -z "$nd_from" ]; then
      exit 0
    fi

    new_addrs=""
    addr_id=10
    while [ $addr_id -gt 0 ]; do
      var_name="nd${nd_id}_addr$addr_id"
      eval "addr=\$$var_name"
      if [ -n "$addr" ] && [ -z "$new_addrs" ]; then
        new_addrs="$addr"
      elif [ -n "$addr" ]; then
        # here we should take other addresses as the old addresses and remove them and related routes.
        for rt_table in $rt_tables; do
          execute_and_log "sudo ip -6 r del $addr dev $interface table $rt_table"
        done
        execute_and_log "sudo ip -6 addr del $addr dev $interface"
      fi
      addr_id=$((addr_id - 1))
    done
    if [ -n "$new_addrs" ]; then
      for rt_table in $rt_tables; do
        execute_and_log "sudo ip -6 r add $new_addrs dev $interface metric $metric mtu $mtu table $rt_table"
      done
    fi

    if [ -n "$nd_from" ]; then
      for default_rt_table in $default_rt_tables; do
        execute_and_log "sudo ip -6 r replace default via $nd_from dev $interface mtu $mtu table $default_rt_table"
      done
      old_gw=`cat /dev/shm/dhcpcd.gw6.$interface 2>/dev/null || echo ""`
      if [ "$nd_from" != "$old_gw" ]; then
        echo $nd_from > /dev/shm/dhcpcd.gw6.$interface
        ip_changed="1"
      fi
    fi

    old_addrs=`cat /dev/shm/dhcpcd.ip6.$interface 2>/dev/null || echo ""`
    if [ "$new_addrs," != "$old_addrs" ]; then
      old_addrs="${old_addrs%,}"
      for rt_table in $rt_tables; do
        execute_and_log "sudo ip -6 r del $old_addrs dev $interface table $rt_table"
      done
      echo "$new_addrs," > /dev/shm/dhcpcd.ip6.$interface
      ip_changed="1"
    fi
    ;;
  BOUND6|REBOOT6)
    addr_id=1
    while [ $addr_id -lt 10 ]; do
      old_var_name="old_dhcp6_ia_na1_ia_addr$addr_id"
      eval "old_addr=\$$old_var_name"
      new_var_name="new_dhcp6_ia_na1_ia_addr$addr_id"
      status_code_name="new_dhcp6_ia_na1_ia_addr${addr_id}_status_code"
      eval "status_code=\$$status_code_name"
      if [ "$status_code" = "2" ]; then
        addr_id=$((addr_id + 1))
        continue
      fi
      eval "new_addr=\$$new_var_name"
      if [ -n "$new_addr" ]; then
        ip_changed="1"
        for rt_table in $rt_tables; do
          sudo ip -6 r add $new_addr dev $interface metric $metric mtu $mtu table $rt_table
        done
      fi
      addr_id=$((addr_id + 1))
    done
    ;;
  RENEW6|REBIND6)
    # compare old address with new address
    addr_id=1
    while [ $addr_id -lt 10 ]; do
      old_var_name="old_dhcp6_ia_na1_ia_addr$addr_id"
      eval "old_addr=\$$old_var_name"
      new_var_name="new_dhcp6_ia_na1_ia_addr$addr_id"
      eval "new_addr=\$$new_var_name"
      if [ "$old_addr" != "$new_addr" ]; then
        ip_changed="1"
      fi
      if [ -n "$new_addr" ]; then
        for rt_table in $rt_tables; do
          sudo ip -6 r add $new_addr dev $interface metric $metric mtu $mtu table $rt_table
        done
      fi
      addr_id=$((addr_id + 1))
    done
    ;;
esac

if [ -n "$ip_changed" ]; then
  redis-cli -n 1 publish "dhcpcd6.ip_change" "$interface"
fi